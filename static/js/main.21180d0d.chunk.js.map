{"version":3,"sources":["firebase.js","ToggleGreen.js","ToggleRed.js","LikeButton.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ToggleGreen","handleClick","setState","active","state","onClick","this","className","Component","ToggleRed","LikeButton","count","App","getUserInput","event","userAsk","target","value","submitQuestion","preventDefault","database","ref","push","deleteQuestion","cueID","child","remove","queues","on","response","data","val","helpcueUpdated","propertyName","waitingForHelp","id","question","action","htmlFor","onChange","row","placeholder","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21180d0d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n\r\n  // Your web app's Firebase configuration\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyBIINcqr3r8lPglG8lvVVuj_5BPlpMr704\",\r\n    authDomain: \"project5-dd870.firebaseapp.com\",\r\n    databaseURL: \"https://project5-dd870.firebaseio.com\",\r\n    projectId: \"project5-dd870\",\r\n    storageBucket: \"project5-dd870.appspot.com\",\r\n    messagingSenderId: \"966876576721\",\r\n    appId: \"1:966876576721:web:722637cba469f2e34f7ef0\"\r\n  };\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;\r\n","import React, { Component } from 'react';\r\nclass ToggleGreen extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      active: false,\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    this.setState({\r\n      active: !this.state.active,\r\n    })\r\n  }\r\n  render() {\r\n    return <button onClick={this.handleClick} className={this.state.active ? \"green\" : \"\"}>🦸‍♂️</button>;\r\n  }\r\n}\r\nexport default ToggleGreen;","import React, { Component } from 'react';\r\nclass ToggleRed extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      active: false,\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    this.setState({\r\n      active: !this.state.active,\r\n    })\r\n  }\r\n  render() {\r\n    return <button onClick={this.handleClick} className={this.state.active ? \"red\" : \"\"}>⛔</button>;\r\n  }\r\n}\r\nexport default ToggleRed;","import React, { Component } from 'react';\r\nclass LikeButton extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      count:0\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    this.setState({\r\n      count: this.state.count+1,\r\n    })\r\n  }\r\n  render() {\r\n    return <button onClick={this.handleClick} className=\"like\">💖 {this.state.count}</button>;\r\n  }\r\n}\r\nexport default LikeButton;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport ToggleGreen from './ToggleGreen';\nimport ToggleRed from './ToggleRed';\nimport LikeButton from './LikeButton';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      queues: [],\n      userAsk: \"\",\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const data = response.val();\n\n      const helpcueUpdated = [];\n\n      for (let propertyName in data) {\n        const waitingForHelp = {\n          id: propertyName,\n          question: data[propertyName],\n        }\n        helpcueUpdated.push(waitingForHelp)\n      }\n      this.setState({\n        queues: helpcueUpdated\n      })\n    })\n  }\n\n  getUserInput = (event) => {\n    this.setState({\n      userAsk: event.target.value\n    })\n  }\n\n  submitQuestion = (event) => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userAsk)\n\n    this.setState({\n      userAsk: \"\"\n    })\n  }\n\n  deleteQuestion = (cueID) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(cueID).remove()\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <h1 className=\"h1\">Mock Helpcue</h1>\n          <form action=\"submit\">\n            <div className=\"textBar\">\n              <label htmlFor=\"question\" className=\"sr-only\">Please type your question here</label>\n              <textarea onChange={this.getUserInput} value={this.state.userAsk} id=\"question\" row=\"20\" placeholder=\"Type your question here\" />\n            </div>\n            <button onClick={this.submitQuestion}>Help!! <span>😣</span></button>\n          </form>\n          <ul>\n            {\n              this.state.queues.map((question) => {\n                return (\n                  <li key={question.id}>\n                    <div className=\"questionBox\">\n                      <div className=\"actualQuestion\">\n                        <p>{question.question}</p>\n                      </div>\n                      <button onClick={() => this.deleteQuestion(question.id)}><span>🚮</span></button>\n                      <ToggleGreen />\n                      <ToggleRed />\n                      <LikeButton />\n                    </div>\n                  </li>\n                )\n              })\n            }\n          </ul>\n        </div>\n        <footer>\n          <div className=\"wrapper\">\n            <p>&copy; Copyright 2020 Gloria Lai Juno College Project5</p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}